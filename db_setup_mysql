For using it in MYSQL (Make sure to add the MYSQL Connctors in Libraries and changes in the web.xml and DBUtil.openConnection() method
                       
In web.xml (make changes)
  ...
    <context-param>
        <param-name>url</param-name>
        <!--<param-value>jdbc:oracle:thin:@//localhost:1521/xe</param-value>-->
        <param-value>jdbc:mysql://localhost:3306/blogsphere</param-value>
    </context-param>
    <context-param>
        <param-name>username</param-name>
        <!--<param-value>blogsphere</param-value>-->
        <param-value>root</param-value>
    </context-param>
    <context-param>
        <param-name>password</param-name>
        <!--<param-value>project</param-value>-->
        <param-value>2507</param-value>
    </context-param>
  ...

In  DBUtil.openConnection()
    public static void openConnection(String url, String user, String password) {
        if (con != null) return;
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(url, user, password);
            System.out.println("BlogSphere Connection Build");
        } catch (Exception ex) {
            System.out.println("Error in opening Connection!");
            ex.printStackTrace();
        }
    }


Then Create the tables and triggers in MySQL
-- Creating USERS table
CREATE TABLE USERS (
    USEREMAIL VARCHAR(60) NOT NULL,
    USERNAME VARCHAR(30),
    CONTACT BIGINT,
    PASSWORD VARCHAR(20),
    PRIMARY KEY (USEREMAIL)
);

-- Creating BLOGS table
CREATE TABLE BLOGS (
    BLOGID VARCHAR(20) NOT NULL,
    USEREMAIL VARCHAR(60),
    TITLE VARCHAR(100),
    CONTENT TEXT,
    TIME DATETIME,
    CATEGORY VARCHAR(20),
    USERNAME VARCHAR(30),
    LIKE_COUNT INT DEFAULT 0,
    COMMENT_COUNT INT DEFAULT 0,
    VIEWS INT DEFAULT 0,
    MILLISECOND INT,
    PRIMARY KEY (BLOGID),
    CONSTRAINT fk_blogs_users FOREIGN KEY (USEREMAIL) REFERENCES USERS(USEREMAIL)
);

-- Creating COMMENTS table
CREATE TABLE COMMENTS (
    BLOGID VARCHAR(20),
    USERID VARCHAR(60),
    CONTENT VARCHAR(1000),
    TIME DATETIME,
    MILLISECOND INT,
    CONSTRAINT fk_comments_blogs FOREIGN KEY (BLOGID) REFERENCES BLOGS(BLOGID),
    CONSTRAINT fk_comments_users FOREIGN KEY (USERID) REFERENCES USERS(USEREMAIL)
);

-- Creating LIKES table
CREATE TABLE LIKES (
    BLOGID VARCHAR(20),
    USERID VARCHAR(60),
    CONSTRAINT fk_likes_blogs FOREIGN KEY (BLOGID) REFERENCES BLOGS(BLOGID),
    CONSTRAINT fk_likes_users FOREIGN KEY (USERID) REFERENCES USERS(USEREMAIL)
);

-- Creating Triggers Set the delimiter to something other than the default semicolon
DELIMITER //

CREATE TRIGGER UPDATE_LIKE_COUNT_AFTER_INSERT
AFTER INSERT ON LIKES
FOR EACH ROW
BEGIN
    UPDATE BLOGS
    SET LIKE_COUNT = LIKE_COUNT + 1
    WHERE BLOGID = NEW.BLOGID;
END;
//

CREATE TRIGGER UPDATE_LIKE_COUNT_AFTER_DELETE
AFTER DELETE ON LIKES
FOR EACH ROW
BEGIN
    UPDATE BLOGS
    SET LIKE_COUNT = LIKE_COUNT - 1
    WHERE BLOGID = OLD.BLOGID;
END;
//

CREATE TRIGGER UPD_CMNT_CNT_INS
AFTER INSERT ON COMMENTS
FOR EACH ROW
BEGIN
    UPDATE BLOGS
    SET COMMENT_COUNT = COMMENT_COUNT + 1
    WHERE BLOGID = NEW.BLOGID;
END;
//

CREATE TRIGGER UPD_CMNT_CNT_DEL
AFTER DELETE ON COMMENTS
FOR EACH ROW
BEGIN
    UPDATE BLOGS
    SET COMMENT_COUNT = COMMENT_COUNT - 1
    WHERE BLOGID = OLD.BLOGID;
END;
//

-- Reset delimiter back to semicolon
DELIMITER ;
